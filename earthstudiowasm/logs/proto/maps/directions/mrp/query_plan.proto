syntax = "proto2";

package logs.proto.maps.directions.mrp;

import "logs/proto/maps/directions/mrp/decoration_spec.proto";
import "logs/proto/maps/directions/mrp/properties.proto";
import "logs/proto/maps/directions/mrp/query_plan_preset.proto";
import "logs/proto/maps/directions/mrp/ranking_spec.proto";
import "logs/proto/maps/directions/mrp/requery_token_trip_context.proto";
import "logs/proto/maps/pathfinder/client/cost-model-options.proto";
import "logs/proto/maps/pathfinder/client/logging-context.proto";
import "logs/proto/maps/pathfinder/client/waypoint.proto";
import "logs/proto/maps/pathfinder/crp/searcher/request_options.proto";
import "storage/datapol/annotations/proto/semantic_annotations.proto";

message LoggedQueryPlanProto {
    repeated pathfinder.client.LoggedWaypoint waypoints = 1;
    optional LoggedQueryPropertiesProto properties = 3;
    repeated LoggedTripGeneratorSpecProto generator_specs = 4;
    optional LoggedRankingSpecProto ranking_spec = 5;
    optional LoggedRequeryTokenTripContext token_trip_context_template = 6;
    optional pathfinder.client.LoggedLoggingContext logging_context = 7;
    optional LoggedQueryPlanPreset preset = 9;
    optional LoggedDecorationSpecProto decoration_spec = 10 [deprecated = true];
}

message LoggedTripGeneratorSpecProto {
    optional LoggedType type = 2;
    enum LoggedType {
        UNKNOWN_TRIP_GENERATOR_TYPE = 0;
        PATHSHARD_GENERATOR = 1;
        FAKE_GENERATOR = 3;
        MULTIWAYPOINT_PATHSHARD_GENERATOR = 4;
    }
    
    optional string label = 3;
    optional LoggedPathShardGeneratorOptions pathshard_generator_options = 4;
    optional LoggedTripPropertiesProto.LoggedTaggedPenalty extra_tagged_penalty = 7;
    optional int64 deadline_milliseconds = 8;
    optional bool is_optional_if_deadline_exceeded_or_cancelled = 9;
    
    reserved 5;
}

message LoggedPathShardGeneratorOptions {
    optional int32 max_trips_per_sub_query = 1;
    optional pathfinder.client.LoggedCostModelOptions cost_model_options = 2;
    
    repeated LoggedSubQueryOptions sub_query_options = 3;
    message LoggedSubQueryOptions {
        repeated pathfinder.client.LoggedCostModelOptions.LoggedBooleanOption boolean_options = 1;
    }
    
    optional LoggedExperimentalParameters experimental_parameters = 4;
    optional pathfinder.crp.searcher.LoggedCrpOptionsProto crp_options = 6;
    optional bool preserve_requery_input = 7;
    optional bool want_reference_trip = 9;
    optional bool output_non_alternate_vias = 10 [default = false];
    optional bool force_soft_snapping = 11;
    optional bool only_dynacore = 12;
    optional bool disable_hints = 13;
}

message LoggedExperimentalParameters {
    optional bool use_experimental_penalties = 55;
    optional bool use_crp = 91;
    optional bool use_fallback_for_crp = 92;
    optional bool only_dynamic_route = 98;
    optional bool enable_crp_dynamic_closures = 132;
    optional bool ignore_search_method_penalties = 155;
    optional bool enable_crp_alternates = 160;
}

message LoggedTripGeneratorSpecModifiers {
    repeated LoggedTripGeneratorSpecModifier modifiers = 1;
}

message LoggedTripGeneratorSpecModifier {
    repeated LoggedCondition conditions = 1;
    message LoggedCondition {
        oneof condition {
            int32 generator_spec_index = 1;
            LoggedTripGeneratorSpecProto.LoggedType generator_spec_type = 2;
            bool request_requires_multiwaypoint = 3;
            string enabled_trip_property_name = 4;
        }
    }
    
    repeated LoggedAction actions = 2;
    message LoggedAction {
        oneof action {
            LoggedTripGeneratorSpecProto merge_generator_spec = 1;
            bool merge_experiments_from_request = 2;
            bool use_traffic_flavors_from_request = 3;
            bool set_rpc_hash = 4;
            bool use_travel_mode_from_request = 5;
            bool convert_to_multiwaypoint = 6;
        }
    }
}
