---
description: 调试和问题解决方法
---

# 调试和问题解决

## 调试流程

当遇到问题时，按以下顺序进行：

### 1. 识别问题
- 精确描述错误信息
- 确定错误发生的位置（文件、行号）
- 理解错误的根本原因

### 2. 分析根因
- 不要急于换方案，先分析为什么会出错
- 查看相关代码的上下文
- 检查依赖和版本兼容性
- 查找类似问题的解决方案

### 3. 制定方案
- 针对根本原因制定修复方案
- 不要绕过问题，要解决问题
- 考虑修复的影响范围

### 4. 实施修复
- 直接修改代码，不要创建新文件来"避免"问题
- 一次修复一个问题
- 确保修复后代码仍符合规范

### 5. 验证结果
- 重新运行测试或构建
- 确认问题已解决
- 检查是否引入新问题

## 常见问题模式

### JavaScript 互操作错误
```
Error: The getter 'toJS' isn't defined for the class 'List<dynamic>'
```

**原因**: 使用了新版 `dart:js_interop` API，但 Flutter 版本不支持

**解决**: 
1. 改用 `dart:js` 库
2. 使用 `js.JsObject` 和 `js.JsFunction`
3. 用 `apply()` 替代 `.toJS` 转换

### WASM 模块加载失败
```
Module 对象未找到
```

**原因**: 
- 脚本未加载完成就尝试访问
- 路径配置错误
- Module 初始化异步问题

**解决**:
1. 等待脚本 onLoad 事件
2. 添加延迟等待 Module 初始化
3. 检查 `js.context['Module']` 是否存在
4. 验证 WASM 文件路径

### 函数调用失败
```
函数 xxx 不存在
```

**原因**:
- 函数名错误（可能需要 `_` 前缀）
- 函数未被导出
- Module 未完全初始化

**解决**:
1. 使用 `getModuleInfo()` 查看导出函数列表
2. 尝试添加 `_` 前缀
3. 确认 Module 初始化完成

## 禁止的调试行为

❌ **不要做**:
- 遇到错误就注释掉问题代码
- 用 try-catch 包裹然后忽略错误
- 创建新文件来"绕过"问题
- 切换到完全不同的实现方案
- 不分析原因就盲目尝试

✅ **应该做**:
- 仔细阅读错误信息
- 理解错误的技术原因
- 针对性地修复问题
- 测试修复是否有效
- 在修复后验证相关功能

## 日志和调试工具

### Dart 端
```dart
// 添加调试日志
print('调试信息: $value');

// 使用 assert 检查前置条件
assert(_module != null, 'Module 未初始化');

// 检查类型
if (obj is js.JsObject) {
  print('对象类型正确');
}
```

### 浏览器端
- 打开开发者工具 (F12)
- 查看 Console 标签的错误和日志
- 使用 Network 标签检查资源加载
- 使用 Sources 标签调试 JavaScript

### 命令行
```bash
# 查看构建错误详情
flutter build web --verbose

# 运行时查看日志
flutter run -d chrome --verbose

# 检查 Lint 错误
flutter analyze
```

## 持续改进

- 记录解决的问题和方案
- 更新代码注释说明特殊处理
- 如果是通用问题，可以封装到工具类
- 不要为了"快速完成"而留下技术债
